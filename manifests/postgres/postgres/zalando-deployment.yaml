---
kind: Namespace
apiVersion: v1
metadata:
  name: postgres
---
apiVersion: acid.zalan.do/v1
kind: postgresql
metadata:
  name: cluster01
  namespace: postgres
spec:
  teamId: acid
  volume:
    size: 30Gi
    storageClass: longhorn
  numberOfInstances: 2
  enableLogicalBackup: true
  s3_endpoint:
    valueFrom:
      secretKeyRef:
        name: postgres-backup
        key: s3_endpoint
  s3_access_key_id:
      valueFrom:
      secretKeyRef:
        name: postgres-backup
        key: s3_access_key_id
  s3_secret_access_key:
      valueFrom:
      secretKeyRef:
        name: postgres-backup
        key: s3_secret_access_key
  preparedDatabases:
    synapse:
      defaultUsers: true
      extensions: {}
      schemas:
        public:
          defaultRoles: false
          defaultUsers: false
    vikunja:
      defaultUsers: true
      extensions: {}
      schemas:
        public:
          defaultRoles: false
          defaultUsers: false
    authentik:
      defaultUsers: true
      extensions: {}
      schemas:
        public:
          defaultRoles: false
          defaultUsers: false
    vaultwarden:
      defaultUsers: true
      extensions: {}
      schemas:
        public:
          defaultRoles: false
          defaultUsers: false
  postgresql:
    version: "17"
    parameters:
      password_encryption: scram-sha-256
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: cluster01.synapse.owner
  namespace: postgres
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRefs:
    - name: 1password
      kind: ClusterSecretStore
  selector:
    secret:
      name: synapse-owner-user.cluster01.credentials.postgresql.acid.zalan.do
  template:
    data:
      _metadata_origin: "push"
      # test123: "{{ .username | toString }}"
      username: "{{ .username | toString }}"
      password: "{{ .password | toString }}"
  data:
    - match:
        secretKey: username
        remoteRef:
          remoteKey: postgres.cluster01.synapse.owner
          property: username
    - match:
        secretKey: password
        remoteRef:
          remoteKey: postgres.cluster01.synapse.owner
          property: password
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: cluster01.vikunja.owner
  namespace: postgres
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRefs:
    - name: 1password
      kind: ClusterSecretStore
  selector:
    secret:
      name: vikunja-owner-user.cluster01.credentials.postgresql.acid.zalan.do
  template:
    data:
      _metadata_origin: "push"
      # test123: "{{ .username | toString }}"
      username: "{{ .username | toString }}"
      password: "{{ .password | toString }}"
  data:
    - match:
        secretKey: username
        remoteRef:
          remoteKey: postgres.cluster01.vikunja.owner
          property: username
    - match:
        secretKey: password
        remoteRef:
          remoteKey: postgres.cluster01.vikunja.owner
          property: password
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: cluster01.authentik.owner
  namespace: postgres
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRefs:
    - name: 1password
      kind: ClusterSecretStore
  selector:
    secret:
      name: authentik-owner-user.cluster01.credentials.postgresql.acid.zalan.do
  template:
    data:
      _metadata_origin: "push"
      # test123: "{{ .username | toString }}"
      username: "{{ .username | toString }}"
      password: "{{ .password | toString }}"
  data:
    - match:
        secretKey: username
        remoteRef:
          remoteKey: postgres.cluster01.authentik.owner
          property: username
    - match:
        secretKey: password
        remoteRef:
          remoteKey: postgres.cluster01.authentik.owner
          property: password
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: cluster01.vaultwarden.owner
  namespace: postgres
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRefs:
    - name: 1password
      kind: ClusterSecretStore
  selector:
    secret:
      name: vaultwarden-owner-user.cluster01.credentials.postgresql.acid.zalan.do
  template:
    data:
      _metadata_origin: "push"
      username: "{{ .username | toString }}"
      password: "{{ .password | toString }}"
  data:
    - match:
        secretKey: username
        remoteRef:
          remoteKey: postgres.cluster01.vaultwarden.owner
          property: username
    - match:
        secretKey: password
        remoteRef:
          remoteKey: postgres.cluster01.vaultwarden.owner
          property: password
---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: postgres-backup
  namespace: postgres
spec:
  refreshInterval: "5m"
  secretStoreRef:
    name: 1password
    kind: ClusterSecretStore
  target:
    name: postgres-backup
    creationPolicy: Owner
  data:
    - secretKey: s3_endpoint
      remoteRef:
        key: postgres-backup
        property: s3_endpoint
    - secretKey: s3_access_key_id
      remoteRef:
        key: postgres-backup
        property: s3_access_key_id
    - secretKey: s3_secret_access_key
      remoteRef:
        key: postgres-backup
        property: s3_secret_access_key